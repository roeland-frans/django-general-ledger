# Generated by Django 2.2.1 on 2019-05-18 15:35

import base.mixins
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone

from django.conf import settings
from django.db import migrations
from django.db import models


class Migration(migrations.Migration):

    initial = True

    dependencies = [("auth", "0011_update_proxy_permissions")]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "password",
                    models.CharField(max_length=128, verbose_name="password"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=128,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=128,
                        verbose_name="email address",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="date joined",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[("objects", django.contrib.auth.models.UserManager())],
        ),
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        help_text="Your physical address.",
                        max_length=100,
                        verbose_name="address",
                    ),
                ),
                (
                    "suburb",
                    models.CharField(max_length=100, verbose_name="Suburb"),
                ),
                (
                    "city",
                    models.CharField(max_length=100, verbose_name="City"),
                ),
                (
                    "code",
                    models.CharField(
                        max_length=10, verbose_name="Postal Code"
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        max_digits=13,
                        null=True,
                        verbose_name="GPS Latitude",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        max_digits=13,
                        null=True,
                        verbose_name="GPS Longitude",
                    ),
                ),
                (
                    "country",
                    models.CharField(blank=True, max_length=16, null=True),
                ),
                (
                    "province",
                    models.CharField(blank=True, max_length=16, null=True),
                ),
            ],
            options={
                "verbose_name": "Address",
                "verbose_name_plural": "Addresses",
            },
        ),
        migrations.CreateModel(
            name="Bank",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=150, verbose_name="Bank Name"),
                ),
                (
                    "validated_name",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Validated Bank Name",
                    ),
                ),
                (
                    "swift_code",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Bank Swift Code",
                    ),
                ),
                (
                    "code",
                    models.CharField(max_length=50, verbose_name="Bank Code"),
                ),
                (
                    "eft_branch_code",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="EFT Branch Code",
                    ),
                ),
                (
                    "can_verify_accounts",
                    models.BooleanField(
                        default=False, verbose_name="Can Verify Accounts"
                    ),
                ),
            ],
            options={"verbose_name": "Bank", "verbose_name_plural": "Banks"},
        ),
        migrations.CreateModel(
            name="Entity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "entity_no",
                    models.CharField(
                        help_text="The Entity's Number",
                        max_length=100,
                        unique=True,
                        verbose_name="Entity Number",
                    ),
                ),
                (
                    "entity_type",
                    models.CharField(
                        choices=[
                            ("INDIVIDUAL", "Personal"),
                            ("SOLE_PROPRIETOR", "Sole Proprietor"),
                            ("PARTNERSHIP", "Partnership"),
                            ("CC", "Closed Corporation"),
                            ("PTY", "Private Company"),
                            ("LTD", "Public Company"),
                            ("NGO", "National Government Organisation"),
                            ("NPO", "Non-Profit Organisation"),
                        ],
                        help_text="Type of entity i.e. Private Individual",
                        max_length=50,
                        verbose_name="Entity Type",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=200, verbose_name="Entity Name"
                    ),
                ),
                (
                    "reg_no",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        verbose_name="Registration Number",
                    ),
                ),
                (
                    "telephone",
                    models.CharField(
                        max_length=15, verbose_name="Telephone Number"
                    ),
                ),
                (
                    "fax",
                    models.CharField(
                        blank=True, max_length=15, verbose_name="Fax Number"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=128, verbose_name="E-mail Address"
                    ),
                ),
                (
                    "bank_verify_count",
                    models.IntegerField(
                        default=0, verbose_name="Bank Verify Count"
                    ),
                ),
                (
                    "physical_address",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="entities_at_physical_address",
                        to="base.Address",
                    ),
                ),
                (
                    "postal_address",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="entities_at_postal_address",
                        to="base.Address",
                    ),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        related_name="entities", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "verbose_name": "Entity",
                "verbose_name_plural": "Entities",
            },
            bases=(models.Model, base.mixins.PermittedMixin),
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "activation_key",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="activation key",
                    ),
                ),
                (
                    "allow_api_access",
                    models.BooleanField(
                        default=False,
                        help_text="Select this option to allow the user to access the API.",
                    ),
                ),
                (
                    "email_secondary",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        verbose_name="Second Email Address (Optional)",
                    ),
                ),
                (
                    "is_affiliate",
                    models.BooleanField(
                        default=False,
                        help_text="Select this option to indicate the user is an affiliate user.",
                    ),
                ),
                (
                    "is_partner",
                    models.BooleanField(
                        default=False,
                        help_text="Select this option to indicate the user is a partner user.",
                    ),
                ),
                (
                    "mobile",
                    models.CharField(
                        max_length=15, verbose_name="Mobile Number"
                    ),
                ),
                (
                    "id_no",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="ID Number",
                    ),
                ),
                (
                    "passport_no",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="Passport Number",
                    ),
                ),
                (
                    "passport_country",
                    models.CharField(blank=True, max_length=16, null=True),
                ),
                ("dob", models.DateField(blank=True, null=True)),
                (
                    "call_count",
                    models.IntegerField(default=0, verbose_name="Call Count"),
                ),
                (
                    "login_notifications",
                    models.CharField(
                        choices=[("sms", "SMS"), ("email", "Email")],
                        default="sms",
                        help_text="Select what method to use for sending login notifications.",
                        max_length=16,
                        verbose_name="Login Notifications",
                    ),
                ),
                (
                    "sms_critical",
                    models.BooleanField(
                        default=True,
                        help_text="Select this option if you want to receive critical notifications via SMS.",
                        verbose_name="SMS Critical Notifications",
                    ),
                ),
                (
                    "email_critical",
                    models.BooleanField(
                        default=True,
                        help_text="Select this option if you want to receive critical notifications via Email.",
                        verbose_name="Email Critical Notifications",
                    ),
                ),
                (
                    "sms_other",
                    models.BooleanField(
                        default=False,
                        help_text="Select this option if you want to receive other notifications via SMS.",
                        verbose_name="SMS Other Notifications",
                    ),
                ),
                (
                    "email_other",
                    models.BooleanField(
                        default=True,
                        help_text="Select this option if you want to receive other notifications via Email.",
                        verbose_name="Email Other Notifications",
                    ),
                ),
                (
                    "avatar_thumbnail",
                    models.CharField(blank=True, max_length=250, null=True),
                ),
                (
                    "session_key",
                    models.CharField(blank=True, max_length=40, null=True),
                ),
                (
                    "locked",
                    models.BooleanField(
                        default=False,
                        help_text="Select this option to lock the account which will suspend it and redirect requests to a user account locked page.",
                    ),
                ),
                (
                    "origin_ref_no",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Origin Reference",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "verbose_name_plural": "User Profiles",
            },
        ),
        migrations.CreateModel(
            name="EntityBankAccount",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "acc_no",
                    models.CharField(
                        max_length=100, verbose_name="Bank Acc No"
                    ),
                ),
                (
                    "bank_account_type",
                    models.CharField(
                        choices=[
                            ("1", "Cheque/Current Account"),
                            ("2", "Savings Account"),
                            ("3", "Transmission Account"),
                            ("4", "Bond Account"),
                        ],
                        default="1",
                        max_length=1,
                        verbose_name="Bank Account Type",
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("VERIFIED", "Verified"),
                            ("VALIDATED", "Validated"),
                            ("PENDING", "Pending Verification"),
                            ("UNVERIFIED", "Unverified"),
                        ],
                        default="UNVERIFIED",
                        max_length=20,
                        verbose_name="State",
                    ),
                ),
                (
                    "bank_name",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Validated Bank Name",
                    ),
                ),
                (
                    "branch",
                    models.CharField(
                        max_length=100, verbose_name="Branch Code"
                    ),
                ),
                (
                    "bank",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="entity_bank_accounts",
                        to="base.Bank",
                    ),
                ),
                (
                    "entity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bank_accounts",
                        to="base.Entity",
                    ),
                ),
            ],
            options={
                "verbose_name": "Entity Bank Account",
                "verbose_name_plural": "Entity Bank Accounts",
            },
        ),
    ]
